0 info it worked if it ends with ok
1 verbose cli [ '/home/beviszhang/.nvm/v0.10.32/bin/node',
1 verbose cli   '/home/beviszhang/.nvm/v0.10.32/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.32
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /home/beviszhang/.npm/3a52ce78-.lock
10 verbose tar pack [ '/home/beviszhang/.npm/gliding/0.2.1/package.tgz', '.' ]
11 verbose tarball /home/beviszhang/.npm/gliding/0.2.1/package.tgz
12 verbose folder .
13 info prepublish gliding@0.2.1
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /home/beviszhang/.npm/1f1177db-tar.lock
16 silly lockFile 9dee81b2-ng-npm-gliding-0-2-1-package-tgz tar:///home/beviszhang/.npm/gliding/0.2.1/package.tgz
17 verbose lock tar:///home/beviszhang/.npm/gliding/0.2.1/package.tgz /home/beviszhang/.npm/9dee81b2-ng-npm-gliding-0-2-1-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 9dee81b2-ng-npm-gliding-0-2-1-package-tgz tar:///home/beviszhang/.npm/gliding/0.2.1/package.tgz
21 silly lockFile 9dee81b2-ng-npm-gliding-0-2-1-package-tgz tar:///home/beviszhang/.npm/gliding/0.2.1/package.tgz
22 silly lockFile 4e758ae1-szhang-npm-gliding-0-2-1-package /home/beviszhang/.npm/gliding/0.2.1/package
23 verbose lock /home/beviszhang/.npm/gliding/0.2.1/package /home/beviszhang/.npm/4e758ae1-szhang-npm-gliding-0-2-1-package.lock
24 silly lockFile 4e758ae1-szhang-npm-gliding-0-2-1-package /home/beviszhang/.npm/gliding/0.2.1/package
25 silly lockFile 4e758ae1-szhang-npm-gliding-0-2-1-package /home/beviszhang/.npm/gliding/0.2.1/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'gliding',
28 silly publish   version: '0.2.1',
28 silly publish   description: 'a super minimal web framework based on nodejs, try to save you from the callback hell',
28 silly publish   main: 'index.js',
28 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
28 silly publish   keywords: [ 'framework', 'web', 'route' ],
28 silly publish   repository: { type: 'git', url: 'git://github.com/BenBBear/gliding.git' },
28 silly publish   author: { name: 'Xinyu Zhang' },
28 silly publish   license: 'MIT',
28 silly publish   dependencies:
28 silly publish    { 'cli-color': '^0.3.2',
28 silly publish      formidable: '^1.0.15',
28 silly publish      mime: '^1.2.11',
28 silly publish      prettyjson: '^1.0.0',
28 silly publish      router: '^0.6.2',
28 silly publish      swig: '^1.4.2',
28 silly publish      walk: '^2.3.4' },
28 silly publish   readme: '<!-- gliding -->\n<!-- Copyright(c) 2014 Xinyu Zhang bevis@mail.ustc.edu.cn -->\n<!-- MIT Licensed -->\n\n# Gliding\n\n## Overview\nGliding is a web framework on nodejs, minimal (only 400 or more lines of code) and modular, extremely easy to be extended. \n\n\nThis is __the first javascript program__ I write, I just start to learn javescript and nodejs, and want to try it on the server side programming. But soon I found the [__callback hell problem__](http://callbackhell.com/) is really annoying, making your code more and more unreadable as you code along. \n\n\n>However, since you use nodejs, you could not escape that, that\'s the beautiful way that node deal with async IO, only with callback and event we need not to worry about those complex lock and sync, while in the same time making cpu and io working more parallel and gain more efficiency.\n\nSo after thinking quite a long time, I come up with a simple idea to try to make lives a little bit easier.\n\nAlso I have some tastes on [angularjs](https://github.com/angular), so I want it to look like it.\n\n\n## Usage \n\n### flow\n- register components as provider or factory\n- register handler that use components, just like\n```js\nfunction($scope, $form, $db, $utility){\n//  $form.fields, $db.user, $utility(x,y,z) \n}\n```\n- run\n\n\n### A quick example\nHere is a example shows how to use inject a `$form` service to the framework, and then use it:\n\n*in the index.js file*\n```js\nvar gliding = require(\'gliding\');\nvar myServer = new gliding.Server(options); // need to set options, so to find the components that would get injected into the server, also change Port or something like that\nmyServer.Run(); \n```\n*inject components into the server, (in a seperate file)*\n```js\nvar gliding = require(\'gliding\');\nvar md = new gliding.Module(); \nvar form = new formidable.IncomingForm();\nvar f = {\n    callback: function(data, options, fun) { //must have interface\n        form.parse(data.HTTP.Request, function(err, fields, files) {\n             fun({\'fields\': fields, \'files\': files });\n        });\n    }\n};\nmd.provider.register(\'$form\', f); // inject the service\n\nvar f6 = function($scope, $form) { //use the service here, and no callback anymore\n    $scope.HTML = JSON.stringify($form); //$form = {fields:stuff, files:stuff}\n};\nvar f7 = function($scope) {\n    $scope.HTML = \'<html> <title>test form</title> <body>\' +\n        \'<form action="/upload" enctype="multipart/form-data" method="post">\' +\n        \'<input type="text" name="title"><br>\' +\n        \'<input type="file" name="upload" multiple="multiple"><br>\' +\n        \'<input type="submit" value="Upload">\' +\n        \'</form>\' +\n        \'</body></html>\';\n};\nmd.handler.register("GET", "/form", [f7,]); \nmd.handler.register("POST", "/upload", [f6,]);\nexports.myModule = md;\n```\n\nThen `node index.js`, the server is running at localhost:8080. \n\n#### result\n![](./img/form.png)\nafter upload a file, print the json on the page.\n![](./img/form2.png)\n\n### Documentation\nWould completed tomorrow and if you could not wait, in the [example](https://github.com/BenBBear/gliding/tree/master/example) fold that you find __all usages__.\n#### Options \n`var server = new gliding.Server(options)` <- here\n\n#### Module()\n`var md = new gliding.Module();` <- here\n\n#### provider\n`md.provider.register(\'$form\', f);` <- here\n\n#### factory\n`md.factory.register(\'dbfactory\',obj)` <- here (not in this example)\n\n#### handler\n`md.handler.register("GET", "/form", [f7,]);` <- here\n\n\n#### Templating\n`$scope.HTML = JSON.stringify($form);` <- here\n\n## How it works\n### Core Code\nIt works based a simple idea. The following is the core of this framework:\n\n```js\n  function fall(sv) {\n            if (sv !== undefined)\n                realArgList.push(sv);\n            if (argQueue.length === 0) {\n                if (argQueue.stage === undefined) {\n                    fun2arg();\n                    fall();\n                } else {\n                    if (funQueue.length === 0) {\n                        argQueue.stage.apply(this, realArgList);\n                        end();\n                    } else {\n                        var retureValue = argQueue.stage.apply(this, realArgList);\n                        if (retureValue !== false) {\n                            realArgList = [$scope];\n                            fun2arg();\n                            fall();\n                        } else {\n                            funQueue = [];\n                            end();\n                        }\n                    }\n                }\n            } else {\n                var nowArg = dequeue(argQueue),\n                    nowService = service[nowArg];\n                if (hasCallback(nowService)) {\n                    nowService.callback($scope, options, fall);\n                } else {\n                    realArgList.push(nowService);\n                    fall();\n                }\n            }\n        }\nfall();\n```\n### Explain \n\nOnce it start to `fall`, it would `fall` into a service that you register which has `callback`, those don\'t have callback wouldn\'t be fall into but just:\n\n```js \n  realArgList.push(nowService); // notice that the realArgList begins with $scope in it.\n```\n\nbut it would pass fall as argument to the callback, so in the callback, it would be call again, just like the previous example\n```js\n   form.parse(data.HTTP.Request, function(err, fields, files) {\n       fun({\'fields\': fields, \'files\': files });\n   });\n```\nand then, we back to `fall`, save this value to our list\n```js\n            if (sv !== undefined)\n                realArgList.push(sv);\n```\nonce we `fall` all the services that the arguments of this function correspond to, it would call this function with \n```js\n                        argQueue.stage.apply(this, realArgList); // the current function is in argQueue.stage\n```\nand then refill the `argQueue`, pop the `funQueue`, and `fall` again\n```js\nrealArgList = [$scope];\nfun2arg();\nfall();\n```\nutil the end;\n```js\n if (funQueue.length === 0) {\n    //    final apply\n    end();\n }\n```\n\n##  Current State\n\n### ready to use?\nNo, I think, it haven\'t been tested a lot yet, also it lacks a lot of other features maybe, so still a long way to go.\n\n### development\n\nI am trying to apply to graduate school these days, and I have serveral projects and courses at the same time, so I\'m very very busy. So __gliding__ wou\'t be developed so actively like I did the recent three days. But I would still work on it, and will have more time on it when my other burning priorities pass.\n\n\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: '6c58469119bcf24c18907e71cc706fb55ca6cbf1',
28 silly publish   bugs: { url: 'https://github.com/BenBBear/gliding/issues' },
28 silly publish   homepage: 'https://github.com/BenBBear/gliding',
28 silly publish   _id: 'gliding@0.2.1',
28 silly publish   _shasum: 'b7628c9f7a8d1080a436df90f6ade9bab8549856',
28 silly publish   _from: '.' }
29 verbose request where is /gliding
30 verbose request registry https://registry.npmjs.org/
31 verbose request id e89e36572c193c70
32 verbose url raw /gliding
33 verbose url resolving [ 'https://registry.npmjs.org/', './gliding' ]
34 verbose url resolved https://registry.npmjs.org/gliding
35 verbose request where is https://registry.npmjs.org/gliding
36 info trying registry request attempt 1 at 23:36:27
37 http PUT https://registry.npmjs.org/gliding
38 http 403 https://registry.npmjs.org/gliding
39 verbose headers { date: 'Thu, 06 Nov 2014 15:36:29 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '10282',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-lax1426-LAX',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1415288189.195129,VS0,VE274',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 0.2.1
41 error old={"name":"gliding","version":"0.2.1","description":"a super minimal web framework based on nodejs, try to save you from the callback hell","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["framework","web","route"],"repository":{"type":"git","url":"git://github.com/BenBBear/gliding.git"},"author":{"name":"Xinyu Zhang"},"license":"MIT","dependencies":{"cli-color":"^0.3.2","formidable":"^1.0.15","mime":"^1.2.11","prettyjson":"^1.0.0","router":"^0.6.2","swig":"^1.4.2","walk":"^2.3.4"},"gitHead":"f3f9ec34059e9daf444b0822d2cea17dc699c858","bugs":{"url":"https://github.com/BenBBear/gliding/issues"},"homepage":"https://github.com/BenBBear/gliding","_id":"gliding@0.2.1","_shasum":"802a200ea1366ab9a7efaa3b52b43f45123e0cdc","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"xyzhang","email":"bevis@mail.ustc.edu.cn"},"maintainers":[{"name":"xyzhang","email":"bevis@mail.ustc.edu.cn"}],"dist":{"shasum":"802a200ea1366ab9a7efaa3b52b43f45123e0cdc","tarball":"http://registry.npmjs.org/gliding/-/gliding-0.2.1.tgz"}}
41 error new={"name":"gliding","version":"0.2.1","description":"a super minimal web framework based on nodejs, try to save you from the callback hell","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["framework","web","route"],"repository":{"type":"git","url":"git://github.com/BenBBear/gliding.git"},"author":{"name":"Xinyu Zhang"},"license":"MIT","dependencies":{"cli-color":"^0.3.2","formidable":"^1.0.15","mime":"^1.2.11","prettyjson":"^1.0.0","router":"^0.6.2","swig":"^1.4.2","walk":"^2.3.4"},"readme":"<!-- gliding -->\u000a<!-- Copyright(c) 2014 Xinyu Zhang bevis@mail.ustc.edu.cn -->\u000a<!-- MIT Licensed -->\u000a\u000a# Gliding\u000a\u000a## Overview\u000aGliding is a web framework on nodejs, minimal (only 400 or more lines of code) and modular, extremely easy to be extended. \u000a\u000a\u000aThis is __the first javascript program__ I write, I just start to learn javescript and nodejs, and want to try it on the server side programming. But soon I found the [__callback hell problem__](http://callbackhell.com/) is really annoying, making your code more and more unreadable as you code along. \u000a\u000a\u000a>However, since you use nodejs, you could not escape that, that's the beautiful way that node deal with async IO, only with callback and event we need not to worry about those complex lock and sync, while in the same time making cpu and io working more parallel and gain more efficiency.\u000a\u000aSo after thinking quite a long time, I come up with a simple idea to try to make lives a little bit easier.\u000a\u000aAlso I have some tastes on [angularjs](https://github.com/angular), so I want it to look like it.\u000a\u000a\u000a## Usage \u000a\u000a### flow\u000a- register components as provider or factory\u000a- register handler that use components, just like\u000a```js\u000afunction($scope, $form, $db, $utility){\u000a//  $form.fields, $db.user, $utility(x,y,z) \u000a}\u000a```\u000a- run\u000a\u000a\u000a### A quick example\u000aHere is a example shows how to use inject a `$form` service to the framework, and then use it:\u000a\u000a*in the index.js file*\u000a```js\u000avar gliding = require('gliding');\u000avar myServer = new gliding.Server(options); // need to set options, so to find the components that would get injected into the server, also change Port or something like that\u000amyServer.Run(); \u000a```\u000a*inject components into the server, (in a seperate file)*\u000a```js\u000avar gliding = require('gliding');\u000avar md = new gliding.Module(); \u000avar form = new formidable.IncomingForm();\u000avar f = {\u000a    callback: function(data, options, fun) { //must have interface\u000a        form.parse(data.HTTP.Request, function(err, fields, files) {\u000a             fun({'fields': fields, 'files': files });\u000a        });\u000a    }\u000a};\u000amd.provider.register('$form', f); // inject the service\u000a\u000avar f6 = function($scope, $form) { //use the service here, and no callback anymore\u000a    $scope.HTML = JSON.stringify($form); //$form = {fields:stuff, files:stuff}\u000a};\u000avar f7 = function($scope) {\u000a    $scope.HTML = '<html> <title>test form</title> <body>' +\u000a        '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">' +\u000a        '<input type=\"text\" name=\"title\"><br>' +\u000a        '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>' +\u000a        '<input type=\"submit\" value=\"Upload\">' +\u000a        '</form>' +\u000a        '</body></html>';\u000a};\u000amd.handler.register(\"GET\", \"/form\", [f7,]); \u000amd.handler.register(\"POST\", \"/upload\", [f6,]);\u000aexports.myModule = md;\u000a```\u000a\u000aThen `node index.js`, the server is running at localhost:8080. \u000a\u000a#### result\u000a![](./img/form.png)\u000aafter upload a file, print the json on the page.\u000a![](./img/form2.png)\u000a\u000a### Documentation\u000aWould completed tomorrow and if you could not wait, in the [example](https://github.com/BenBBear/gliding/tree/master/example) fold that you find __all usages__.\u000a#### Options \u000a`var server = new gliding.Server(options)` <- here\u000a\u000a#### Module()\u000a`var md = new gliding.Module();` <- here\u000a\u000a#### provider\u000a`md.provider.register('$form', f);` <- here\u000a\u000a#### factory\u000a`md.factory.register('dbfactory',obj)` <- here (not in this example)\u000a\u000a#### handler\u000a`md.handler.register(\"GET\", \"/form\", [f7,]);` <- here\u000a\u000a\u000a#### Templating\u000a`$scope.HTML = JSON.stringify($form);` <- here\u000a\u000a## How it works\u000a### Core Code\u000aIt works based a simple idea. The following is the core of this framework:\u000a\u000a```js\u000a  function fall(sv) {\u000a            if (sv !== undefined)\u000a                realArgList.push(sv);\u000a            if (argQueue.length === 0) {\u000a                if (argQueue.stage === undefined) {\u000a                    fun2arg();\u000a                    fall();\u000a                } else {\u000a                    if (funQueue.length === 0) {\u000a                        argQueue.stage.apply(this, realArgList);\u000a                        end();\u000a                    } else {\u000a                        var retureValue = argQueue.stage.apply(this, realArgList);\u000a                        if (retureValue !== false) {\u000a                            realArgList = [$scope];\u000a                            fun2arg();\u000a                            fall();\u000a                        } else {\u000a                            funQueue = [];\u000a                            end();\u000a                        }\u000a                    }\u000a                }\u000a            } else {\u000a                var nowArg = dequeue(argQueue),\u000a                    nowService = service[nowArg];\u000a                if (hasCallback(nowService)) {\u000a                    nowService.callback($scope, options, fall);\u000a                } else {\u000a                    realArgList.push(nowService);\u000a                    fall();\u000a                }\u000a            }\u000a        }\u000afall();\u000a```\u000a### Explain \u000a\u000aOnce it start to `fall`, it would `fall` into a service that you register which has `callback`, those don't have callback wouldn't be fall into but just:\u000a\u000a```js \u000a  realArgList.push(nowService); // notice that the realArgList begins with $scope in it.\u000a```\u000a\u000abut it would pass fall as argument to the callback, so in the callback, it would be call again, just like the previous example\u000a```js\u000a   form.parse(data.HTTP.Request, function(err, fields, files) {\u000a       fun({'fields': fields, 'files': files });\u000a   });\u000a```\u000aand then, we back to `fall`, save this value to our list\u000a```js\u000a            if (sv !== undefined)\u000a                realArgList.push(sv);\u000a```\u000aonce we `fall` all the services that the arguments of this function correspond to, it would call this function with \u000a```js\u000a                        argQueue.stage.apply(this, realArgList); // the current function is in argQueue.stage\u000a```\u000aand then refill the `argQueue`, pop the `funQueue`, and `fall` again\u000a```js\u000arealArgList = [$scope];\u000afun2arg();\u000afall();\u000a```\u000autil the end;\u000a```js\u000a if (funQueue.length === 0) {\u000a    //    final apply\u000a    end();\u000a }\u000a```\u000a\u000a##  Current State\u000a\u000a### ready to use?\u000aNo, I think, it haven't been tested a lot yet, also it lacks a lot of other features maybe, so still a long way to go.\u000a\u000a### development\u000a\u000aI am trying to apply to graduate school these days, and I have serveral projects and courses at the same time, so I'm very very busy. So __gliding__ wou't be developed so actively like I did the recent three days. But I would still work on it, and will have more time on it when my other burning priorities pass.\u000a\u000a\u000a","readmeFilename":"README.md","gitHead":"6c58469119bcf24c18907e71cc706fb55ca6cbf1","bugs":{"url":"https://github.com/BenBBear/gliding/issues"},"homepage":"https://github.com/BenBBear/gliding","_id":"gliding@0.2.1","_shasum":"b7628c9f7a8d1080a436df90f6ade9bab8549856","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"xyzhang","email":"bevis@mail.ustc.edu.cn"},"maintainers":[{"name":"xyzhang","email":"bevis@mail.ustc.edu.cn"}],"dist":{"shasum":"b7628c9f7a8d1080a436df90f6ade9bab8549856","tarball":"http://registry.npmjs.org/gliding/-/gliding-0.2.1.tgz"}}: gliding
41 error     at RegClient.<anonymous> (/home/beviszhang/.nvm/v0.10.32/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
41 error     at Request._callback (/home/beviszhang/.nvm/v0.10.32/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
41 error     at Request.self.callback (/home/beviszhang/.nvm/v0.10.32/lib/node_modules/npm/node_modules/request/request.js:236:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/home/beviszhang/.nvm/v0.10.32/lib/node_modules/npm/node_modules/request/request.js:1142:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/home/beviszhang/.nvm/v0.10.32/lib/node_modules/npm/node_modules/request/request.js:1096:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:943:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Linux 3.13.0-39-generic
44 error command "/home/beviszhang/.nvm/v0.10.32/bin/node" "/home/beviszhang/.nvm/v0.10.32/bin/npm" "publish"
45 error cwd /home/beviszhang/WORKSPACE/gliding
46 error node -v v0.10.32
47 error npm -v 1.4.28
48 verbose exit [ 1, true ]
